#!/usr/bin/env python
# coding: utf-8

# In[356]:


import numpy as np
import random


# # 12 jobs e 5 maquinas

# In[357]:


class job_machine:
    valor = np.random.randint(low=0, high=10,size=(12,12))


# In[358]:


# # feronomio representa um desejo de um job i ser colocado na posição j

# In[359]:


class feromonio:
    valor = list(np.zeros((12,12), dtype=float))


# In[360]:


for i in range(12):
    for j in range(12):
        feromonio.valor[i][j] = 1.0


# In[361]:


class info:
    valor = list(np.zeros((12,12), dtype=float))


# In[362]:


def ComputeMatrizInfo():
    alpha = 1.0
    beta = 1.0

    for i in range(12):
        for j in range(12):
            info.valor[i][j] = ((feromonio.valor[i][j]**alpha)*(job_probabilidade(feromonio.valor[i][j],len(feromonio.valor[i]))**beta))


# In[363]:


def job_probabilidade(x,y):
    
    z = 0.0
    
    z=x/y
    return z


# In[364]:


class formiga:
    def __init__(self):
        self.dist_percurso = 0.0
        self.percurso = np.zeros((12,), dtype=int)
        self.visitado = list(np.zeros((12,), dtype=bool))


# In[365]:


class melhores:
    melhor_distancia = 9223372036854775807
    melhor_percurso = np.zeros((12,), dtype=int)
    k = 0


# In[366]:


def inicializa_formigas(quantidade):
    
    formigas = []
    
    for i in range(quantidade):
        formigas.append(formiga())
        
    for i in range(len(formigas)):
        r = np.array(random.sample([0,1,2,3,4,5,6,7,8,9,10,11],k=12))
        formigas[i].percurso = r
    return formigas


# In[367]:


def MakeSpan(formigas,k):   
    machines = len(info.valor[0])
    machinesTime = [float] * machines
    tempo = 0;

    for job in formigas[k].percurso:
        for i in range(machines):
            tempo = info.valor[job][i]
            if i == 0:
                machinesTime[i] = tempo
            else:
                machinesTime[i] = machinesTime[i - 1] + tempo
                
                if (machinesTime[i] > machinesTime[i - 1]):
                    machinesTime[i] = machinesTime[i] + tempo

        return machinesTime[machines - 1]


# In[368]:


def ConstruaSolucoes(formigas):
    
    
    for k in range(len(formigas)):
        for i in range(len(formigas[0].visitado)):
            formigas[k].visitado[i] = False
    #print("formigas percurso:{}".format(formigas[k].percurso))
            
            
            
            
    passo = 1
    for k in range(len(formigas)):
        r = random.randint(0,len(formigas[0].percurso)-1)
        autogenerated2(formigas,k,r,passo)
        formigas[k].visitado[r] = True
        #print("formigas percurso2222:{}".format(formigas[k].percurso))
        

        
    while (passo < len(formigas[0].percurso)):
        passo += 1
        for k in range(len(formigas)):
            ComputeRegraDecisao(formigas,k, passo)
         #   print("formigas percurso3333:{}".format(formigas[k].percurso))
            

    for k in range (len(formigas)):
        autogenerated2(formigas,k,formigas[k].percurso[0],len(formigas[0].percurso)-1)
        formigas[k].dist_percurso = MakeSpan(formigas,k)
        #print("formigas percurso4444:{}".format(formigas[k].percurso))
        


# In[376]:


def autogenerated2(formigas,k,r,i):
    #print("formigas aux:{}".format(formigas[k].percurso[i]))
    #print("formigas percurso:{}".format(formigas[k].percurso))
    #print("index:{}".format(list(formigas[k].percurso).index(r)))
    aux = formigas[k].percurso[i]
    j = list(formigas[k].percurso).index(r)
    list(formigas[k].percurso).remove(r)
    list(formigas[k].percurso).remove(aux)
    formigas[k].percurso[i] = r
    formigas[k].percurso[j] = aux
    #print("formigas percurso possssss:{}".format(formigas[k].percurso))


# In[377]:


def ComputeRegraDecisao(formigas,k, i):
    c = formigas[k].percurso[i-1]
    soma_probabilidade = 0.0
    selecao_probabilidade = [float]*12
    for j in range(len(formigas[0].percurso)):
        if formigas[k].visitado[j]:
            selecao_probabilidade[j] = 0.0
        else:
            selecao_probabilidade[j] = info.valor[c][j]
            soma_probabilidade += selecao_probabilidade[j]
            
    
    r = random.uniform(0, soma_probabilidade)
    j = 0
    p = selecao_probabilidade[j]
    while (p < r):
        j += 1
        p += selecao_probabilidade[j]
        
    if i < len(formigas[0].percurso):
        #formigas[k].percurso[i] = j
        autogenerated2(formigas,k,j,i)
    formigas[k].visitado[j] = True
    


# In[371]:


def AtualizeEstatisticas(formigas):
    for k in range(len(formigas)):
        if formigas[k].dist_percurso < melhores.melhor_distancia:
            melhores.melhor_percurso = np.copy(formigas[k].percurso)
            melhores.melhor_distancia = formigas[k].dist_percurso
            melhores.k = k


# In[372]:


def Evapore():
    for i in range (12):
        for j  in range (12):
            feromonio.valor[i][j] = (1 - p) * feromonio.valor[i][j]
            feromonio.valor[j][i] = feromonio.valor[i][j] ##matriz simétrica


# In[373]:


def DepositeFeromonio(k):
    total = q/formigas[k].dist_percurso
    for i in range (12):
        if i+1 < 12:
            z = formigas[k].percurso[i]
            x = formigas[k].percurso[i+1]
            feromonio.valor[z][x] = feromonio.valor[z][x] + total
            feromonio.valor[x][z] = feromonio.valor[x][z]


# In[374]:


def AtualizeFeromonio():
    Evapore()
    for k in range(len(formigas)):
        DepositeFeromonio(k)
    ComputeMatrizInfo()


# In[375]:


p = 0.75
q = 80
ComputeMatrizInfo()

formigas = inicializa_formigas(20)

iteracoes = 0
while(iteracoes < 100):
    ConstruaSolucoes(formigas)
    AtualizeEstatisticas(formigas)
    AtualizeFeromonio()
    iteracoes+=1
    print("Melhor formiga da iteração:{}\n".format(melhores.k))
    print("Melhor tempo da iteração:{}\n".format(melhores.melhor_distancia))
    print("\nMelhor percurso da iteração:\n{}\n".format(melhores.melhor_percurso))
    



